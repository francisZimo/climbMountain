ES6，2015.06正式发布，又称ES2015
目前并不是所有浏览器都兼容ES6全部特性

Babel,是一个广泛使用的ES6转码器，作用是：可以将ES6代码转为ES5代码，从而在现有环境执行。官网：http://babeljs.io/

1、变量声明const和let
	let 与 const :
	块级作用域，这两个的用途与var类似，都是用来声明变量的，但在实际运用中都有各自的特殊用途。
	var:
	ES5只有全局作用域、函数作用域和eval作用域，没有块级作用域

	区别：
	1、变量提升
	var：
	变量提升：就是var关键字声明变量。无论声明在何处，都会被视为声明在函数的最顶部；不在函数内即在全局作用域的最顶部
	先打印，后var，结果为undefined
	let ：
	就不会被变量提升
	先打印，后let，结果为a is not defined

	2、内层变量覆盖外层变量
		局部变量var，会使全局变量改变，let则不会
	3、场景就是用来计数的循环变量泄露为全局变量
		for循环保存i，会使所有结果都为最后的i值，用let则不会

	const用来声明常亮，一旦声明不可改变，用来避免重命名

2、template string 模板字符串
	ES6中允许使用反引号 ` 来创建字符串，此种方法创建的字符串里面可以包含由美元符号加花括号包裹的变量${vraible}。可以多行，不需要\

3、函数
	函数默认参数：
	避免传"0"默认没传导致无法读取
	  function action(num = 200) {
        console.log(num)
    }

	箭头函数：
	箭头函数最直观的三个特点。
	不需要 function 关键字来创建函数
	省略 return 关键字
	继承当前上下文的 this 关键字
	当你的函数有且仅有一个参数的时候，是可以省略掉括号的。当你函数返回有且仅有一个表达式的时候可以省略{} 和 return
	var people = name => 'hello' + name
	var people = (name, age) => {...} 

4、拓展的对象功能
	键值对重名简写;

	对象添加方法简写，省略冒号与 function 关键字
	 const people = {
        name: 'lux',
        getName () {
            console.log(this.name)
        }
    }

    Object.assign()这个方法来实现浅复制；
    Object.assign() 可以把任意多个源对象自身可枚举的属性拷贝给目标对象，然后返回目标对象。第一参数即为目标对象。在实际项目中，我们为了不改变源对象。一般会把目标对象传为{}
    Object.assign({}, objC, objA, objB)；

5、destructuring 解构
	用途一，交换变量的值，不再需要中间变量
	[a, b] = [b, a];

	用途二，提取JSON数据
	const { name, age } = people
	const [first, second] = color
	let {id, title, data:number} = jsonData
	const { body, body: { username, password } } = request

	用途三，函数参数的定义

	// 参数是一组有次序的值 function f([x, y, z]) { ... } f([1, 2, 3]);
	// 参数是一组无次序的值 function f({x, y, z}) { ... } f({z: 3, y: 2, x: 1});

6、Spread Operator 展开运算符
	组装数组或者对象：
	 const colorful = [...color, 'green', 'pink']
	 const alphabets = { ...alp, third: 'c' }
	取数组或者对象第二个后的所有元素
 	const [first, ...rest] = number
 	const { username, ...rest } = user
 	组合新的数组
 	const total = { ...first, ...second }

7、import 和 export
	import导入模块、export导出模块

	//全部导入
	import people from './example'

	//有一种特殊情况，即允许你将整个模块当作单一对象进行导入
	//该模块的所有导出都会作为对象的属性存在
	import * as example from "./example.js"
	console.log(example.name)
	console.log(example.age)
	console.log(example.getName())

	//导入部分
	import {name, age} from './example'

	// 导出默认, 有且只有一个默认
	export default App

	// 部分导出
	export class App extend Component {};

	导入的时候大括号的区别
	1.当用export default people导出时，就用 import people 导入（不带大括号）

	2.一个文件里，有且只能有一个export default。但可以有多个export。

	3.当用export name 时，就用import { name }导入（记得带上大括号）

	4.当一个文件里，既有一个export default people, 又有多个export name 或者 export age时，导入就用 import people, { name, age } 

	5.当一个文件里出现n多个 export 导出很多模块，导入时除了一个一个导入，也可以用import * as example

8、 Promise