vue声明周期：（1.0）
	钩子函数:
	created	->   实例已经创建	√
	beforeCompile	->   编译之前
	compiled	->   编译之后
	ready		->   插入到文档中	√

	beforeDestroy	->   销毁之前
	destroyed	->   销毁之后
------------------------------------------------------------------
防止闪烁（防止用户看到花括号）
	v-cloak	防止闪烁, 比较大段落
	v-text	文本
	v-html	节点
------------------------------------------------------------------
计算属性的使用：
	computed: {
		b:function(){	//默认调用get
			return 值
		}
	}
	computed:{
		b:{
			get:
			set:
		}
	}
	* computed里面可以放置一些业务逻辑代码，一定记得return
------------------------------------------------------------------
vue实例简单方法:
	vm.$el	->  就是元素
	vm.$data  ->  就是data
	vm.$mount ->  手动挂在vue程序
	vm.$options	->   获取自定义属性
	vm.$destroy	->   销毁对象
	vm.$log();	->  查看现在数据的状态
------------------------------------------------------------------
循环：
	v-for="value in data"
	会有重复数据？
	track-by='索引'	提高循环性能（避免重复不能读取）
	track-by='$index/uid'
------------------------------------------------------------------
自定义过滤器:  model ->过滤 -> view
	Vue.filter(name,function(input){
		
	});
双向过滤器:*
	Vue.filter(name,{
		read:
		write:
	});
------------------------------------------------------------------
自定义指令:
	Vue.directive(指令名称,function(参数){
		this.el	-> 原生DOM元素
	});
	指令名称: 	v-red  ->  red
自定义元素指令:（用处不大）
	Vue.elementDirective('zns-red',{
	    bind:function(){
	        this.el.style.background='red';
	    }
	});
自定义键盘信息:
	Vue.directive('on').keyCodes.ctrl=17;
	Vue.directive('on').keyCodes.myenter=13;
		@keydown.myenter="show"
------------------------------------------------------------------
监听数据变化:
	vm.$el/$mount/$options/....
	vm.$watch(name,fnCb);  //浅度
	vm.$watch(name,fnCb,{deep:true});  //深度监视 