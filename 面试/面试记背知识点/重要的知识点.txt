1、
浏览器：内核	前缀
谷歌：Webkit	-Webkit-
欧朋：Presto	-o-
苹果：Webkit	-Webkit-
火狐：gecko	-moz-
IE:Trident	-ms-

2、
阻止默认事件
	W3C:	event.preventDefault()
	IE:	event.returnValue=false
	vue:	event.preventDefault();
		@contextmenu.prevent	推荐
阻止事件冒泡
	W3C:	event.stopPropagation()
	IE:	event.cancelbubble=true;
	vue:	event.cancelBubble=true;
		@click.stop	推荐

3、
优雅降级=》以新式浏览器为基础，为老式浏览器针对的写不同的方案，使之能正常显示使用
渐进增强=》以老式浏览器为基础，为新式浏览器添加起能支持的功能

4、线程与进程的区别
一个程序至少有一个进程,一个进程至少有一个线程. 
线程的划分尺度小于进程，使得多线程程序的并发性高。 
另外，进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率。 
线程在执行过程中与进程还是有区别的。每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口。但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制。 
从逻辑角度来看，多线程的意义在于一个应用程序中，有多个执行部分可以同时执行。但操作系统并没有将多个线程看做多个独立的应用，来实现进程的调度和管理以及资源分配。这就是进程和线程的重要区别。

5、请描述一下 cookies，sessionStorage 和 localStorage 的区别？
cookie：只能存储4KB浪费带宽，每次会随着HTTP请求发送给服务器操作数据很繁琐，没有方便的API
HTML5 本地存储：大小最小5MB，可以申请更大的空间不会随HTTP请求发送给服务器非常容易操作移动端普及高localStorage与sessionStorage两种	
sessionStorage为临时性保存数据，当页面关闭就会消失
localStorage? ? 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；

cookie是存储在浏览器端，并且随浏览器的请求一起发送到服务器端的，它有一定的过期时间，到了过期时间自动会消失。sessionStorage和localeStorage也是存储在客户端的，同属于web Storage，比cookie的存储大小要大有8m，cookie只有4kb，localeStorage是持久化的存储在客户端，如果用户不手动清除的话，不会自动消失，会一直存在，sessionStorage也是存储在客户端，但是它的存活时间是在一个回话期间，只要浏览器的回话关闭了就会自动消失。

作者：汪汪
链接：https://www.zhihu.com/question/41466747/answer/132562725
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。

6、GET和POST的区别，何时使用POST？
GET：一般用于信息获取，使用URL传递参数，对所发送信息的数量也有限制，一般在2000个字符
POST：一般用于修改服务器上的资源，对所发送的信息没有限制。
GET方式需要使用Request.QueryString来取得变量的值，而POST方式通过Request.Form来获取变量的值，
也就是说Get是通过地址栏来传值，而Post是通过提交表单来传值。
然而，在以下情况中，请使用 POST 请求：
无法使用缓存文件（更新服务器上的文件或数据库）
向服务器发送大量数据（POST 没有数据量限制）
发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠


7.什么是闭包？
闭包，官方对闭包的解释是：一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分。闭包的特点：
（1）作为一个函数变量的一个引用，当函数返回时，其处于激活状态。
（2） 一个闭包就是当一个函数返回时，一个没有释放资源的栈区。
简单的说，Javascript允许使用内部函数---即函数定义和函数表达式位于另一个函数的函数体内。而且，这些内部函数可以访问它们所在的外部函数中声明的所有局部变量、参数和声明的其他内部函数。当其中一个这样的内部函数在包含它们的外部函数之外被调用时，就会形成闭包。

8、javascript面向对象中继承实现？
面向对象的基本特征有：封闭、继承、多态。

在JavaScript中实现继承的方法：

1. 原型链（prototype chaining）

2. call()/apply()

3. 混合方式(prototype和call()/apply()结合)

4. 对象冒充

继承的方法如下：
	1、prototype原型链方式：
	2、call()/apply()方法
	3、混合方法【prototype,call/apply】
	4、对象冒充